<?php
final class GWF_HTAccess
{
	################
	### HTACCESS ###
	################
	public static function getHTAccess()
	{
		return
			'#############################'.PHP_EOL.
			'### Generated by GWFv4.01 ###'.PHP_EOL.
            '### Use .htaccess_append  ###'.PHP_EOL.
            '### and .htaccess_prepend ###'.PHP_EOL.
            '### to customize          ###'.PHP_EOL.
			'#############################'.PHP_EOL.
			PHP_EOL.
			PHP_EOL.
			'# No dot files'.PHP_EOL.
			'RewriteRule (^\.|/\.) - [F]'.PHP_EOL.
			PHP_EOL.
			'# Custom error pages'.PHP_EOL.
			'ErrorDocument 400 '.GWF_WEB_ROOT_NO_LANG.'index.php?mo=GWF&me=ShowError&code=400'.PHP_EOL.
			'ErrorDocument 401 '.GWF_WEB_ROOT_NO_LANG.'index.php?mo=GWF&me=ShowError&code=401'.PHP_EOL.
			'ErrorDocument 403 '.GWF_WEB_ROOT_NO_LANG.'index.php?mo=GWF&me=ShowError&code=403'.PHP_EOL.
			'ErrorDocument 404 '.GWF_WEB_ROOT_NO_LANG.'index.php?mo=GWF&me=ShowError&code=404'.PHP_EOL.
			PHP_EOL.
			'RewriteEngine On'.PHP_EOL.
#			PHP_EOL.
#			'RewriteCond %{HTTP_HOST} ^www.'.GWF_DOMAIN.'$ [NC]'.PHP_EOL.
#			'RewriteRule ^(.*) http://'.GWF_DOMAIN.'/$1 [L,R=301]'.PHP_EOL.
			PHP_EOL.
			self::getLangRewrites().PHP_EOL.
			PHP_EOL;
	}
	
	public static function createWellKnownFolder()
	{
		if (!($success = GWF_File::isFile(GWF_PATH.'.well-known/.htaccess')))
		{
			if (GWF_File::createDir(GWF_PATH.'.well-known'))
			{
				$success = @file_put_contents(GWF_PATH.'.well-known/.htaccess', "Options +Indexes\nRewriteEngine On\n");
			}
		}
		return $success;
	}

	public static function getPostHTAccess()
	{
		return
			sprintf(PHP_EOL.
			'RewriteCond %%{REQUEST_URI} ^%s([^/]+)/([^/]+)$'.PHP_EOL.
			'RewriteCond %%{REQUEST_FILENAME} !-f'.PHP_EOL. # if not in .htaccess or <directory block> add a %{DOCUMENT_ROOT}/ in front of
			'RewriteCond %%{REQUEST_FILENAME} !-d'.PHP_EOL.
			'RewriteCond %smodule/%%1/method/%%2.php -f'.PHP_EOL.
			'RewriteRule ^([^/]+)/([^/]+)$ %sindex.php?mo=$1&me=$2&%%{QUERY_STRING} [L,QSA]'.PHP_EOL.
			PHP_EOL, GWF_WEB_ROOT_NO_LANG, GWF_CORE_PATH, GWF_WEB_ROOT_NO_LANG);
	}

	private static function getLangRewrites()
	{
		$back  = '#################'.PHP_EOL;
		$back .= '### languages ###'.PHP_EOL;
		$back .= '#################'.PHP_EOL;
		foreach (GWF_Language::getAvailable() as $iso)
		{
			if (false !== GWF_Language::getByISO($iso))
			{
				$back .= sprintf('RewriteRule ^%s/(.*) /$1', $iso).PHP_EOL;
			}
		}
		return $back;
	}

	public static function installCountryRewrites()
	{
		require_once GWF_CORE_PATH.'inc/install/data/GWF_LanguageData.php';
		$content = 'RewriteEngine On'.PHP_EOL;
		foreach(GWF_LanguageData::getCountries() as $id => $a)
		{
			$content .= sprintf('RewriteRule ^(.*/country)/%s(.png|/)?$ $1/%s'.PHP_EOL, str_replace(' ', '\s?', $a[0]), $id );
		}
		return self::protectB(GWF_WWW_PATH.'img' ,$content);
	}

	###############
	### Protect ###
	###############
	/**
	 * Deny access to a directory via .htaccess
	 * @param string $dir
	 * @return true|false
	 */
	public static function protect($dir)
	{
		return self::protectB($dir, self::protectRule());
	}
	
	public static function protectRule()
	{
		switch (GWF_SERVER_VERSION)
		{
			default:
			case 'APACHE2.2': return 'deny from all'.PHP_EOL;
			case 'APACHE2.4': return 'require all denied'.PHP_EOL;
			case 'NGINGX': return '';
		}
	}


	/**
	 * Deny access to a directory via .htaccess and a fake 404 response.
	 * @param string $dir
	 * @return true|false
	 */
	public static function protect404($dir)
	{
		$content = 'RewriteEngine On'.PHP_EOL.'RewriteRule .* /index.php?mo=GWF&me=ShowError&code=404'.PHP_EOL;
		return self::protectB($dir, $content);
	}

	/**
	 * HTA Writer.
	 * @param string $dir
	 * @param string $content
	 */
	private static function protectB($dir, $content)
	{
		$dir = rtrim($dir, '\/');
		$path = $dir.'/.htaccess';

		if (!is_dir($dir))
		{
			GWF_Log::logCritical(sprintf('Supported arg is not a dir in %s.', __METHOD__));
			return false;
		}

		if (!is_writable($dir))
		{
			GWF_Log::logCritical(sprintf('Cannot write to directory %s in %s.', $dir, __METHOD__));
			return false;
		}

		if (!file_put_contents($path, $content))
		{
			GWF_Log::logCritical(sprintf('Cannot write to file %s in %s.', $path, __METHOD__));
			return false;
		}

		return true;
	}
}

